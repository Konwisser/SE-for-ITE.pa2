var search_data = {"index":{"searchIndex":["fileparser","movie","moviedata","moviedatatest","moviedatatestpopularity","moviedatatestsimilarity","movietest","movietesttest","popularitycalculator","predictiontestresult","rating","ratingfactory","ratingpredicter","similaritycache","similaritycachetest","similaritycalculator","test","unit","autorunner","ui","testhelper","testtime","user","==()","==()","add_rating()","add_rating()","add_result()","all_movies()","all_users()","clear_most_sim()","create()","get_most_sim()","get_sim()","insert_popularities()","load_data()","mean()","min_sim=()","min_similarity=()","most_similar()","most_similar()","movie()","movie()","movies()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","now()","output_level=()","parse()","popularity()","popularity_list()","predict()","predict()","print_header()","print_list_to_string()","put_most_sim()","put_sim()","rated_movies()","rating()","rating()","rating_num()","rms()","run_test()","similarity()","similarity()","stddev()","test_get_sim()","test_mean()","test_most_similar_on_real_data()","test_most_similar_on_test_data()","test_movies()","test_popularity_calculation()","test_predict()","test_print_real_popularity_list()","test_rating()","test_read_real_data_base_test_pair()","test_read_real_data_full()","test_read_test_data()","test_rms()","test_run_test()","test_stddev()","test_to_a()","test_user_to_user_similarity()","test_viewers()","to_a()","to_s()","to_s()","user()","user()","viewers()"],"longSearchIndex":["fileparser","movie","moviedata","moviedatatest","moviedatatestpopularity","moviedatatestsimilarity","movietest","movietesttest","popularitycalculator","predictiontestresult","rating","ratingfactory","ratingpredicter","similaritycache","similaritycachetest","similaritycalculator","test","test::unit","test::unit::autorunner","test::unit::ui","testhelper","testtime","user","movie#==()","user#==()","movie#add_rating()","user#add_rating()","movietest#add_result()","moviedata#all_movies()","moviedata#all_users()","similaritycache#clear_most_sim()","ratingfactory#create()","similaritycache#get_most_sim()","similaritycache#get_sim()","popularitycalculator#insert_popularities()","moviedata#load_data()","movietest#mean()","similaritycalculator#min_sim=()","moviedata#min_similarity=()","moviedata#most_similar()","similaritycalculator#most_similar()","moviedata#movie()","predictiontestresult#movie()","moviedata#movies()","movie::new()","moviedata::new()","movietest::new()","popularitycalculator::new()","predictiontestresult::new()","rating::new()","ratingpredicter::new()","similaritycache::new()","similaritycalculator::new()","testtime::new()","user::new()","testtime#now()","test::unit::autorunner#output_level=()","fileparser#parse()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","ratingpredicter#predict()","testhelper#print_header()","testhelper#print_list_to_string()","similaritycache#put_most_sim()","similaritycache#put_sim()","user#rated_movies()","moviedata#rating()","predictiontestresult#rating()","user#rating_num()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","similaritycalculator#similarity()","movietest#stddev()","similaritycachetest#test_get_sim()","movietesttest#test_mean()","moviedatatestsimilarity#test_most_similar_on_real_data()","moviedatatestsimilarity#test_most_similar_on_test_data()","moviedatatest#test_movies()","moviedatatestpopularity#test_popularity_calculation()","moviedatatest#test_predict()","moviedatatestpopularity#test_print_real_popularity_list()","moviedatatest#test_rating()","moviedatatest#test_read_real_data_base_test_pair()","moviedatatest#test_read_real_data_full()","moviedatatest#test_read_test_data()","movietesttest#test_rms()","moviedatatest#test_run_test()","movietesttest#test_stddev()","movietesttest#test_to_a()","moviedatatestsimilarity#test_user_to_user_similarity()","moviedatatest#test_viewers()","movietest#to_a()","movie#to_s()","user#to_s()","moviedata#user()","predictiontestresult#user()","moviedata#viewers()"],"info":[["FileParser","","FileParser.html","","<p>This utility class is used to read in and parse files of the rated movies\ndata set.\n<p>Author &mdash; Georg Konwisser …\n\n"],["Movie","","Movie.html","","<p>This model class represents a single movie and contains references to all\nits ratings.\n<p>Author &mdash; Georg Konwisser …\n\n"],["MovieData","","MovieData.html","","<p>This class represents a whole movie data set with a list of movies, a list\nof users and a list of movie …\n"],["MovieDataTest","","MovieDataTest.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n"],["MovieDataTestPopularity","","MovieDataTestPopularity.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n"],["MovieDataTestSimilarity","","MovieDataTestSimilarity.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n"],["MovieTest","","MovieTest.html","","<p>This class contains all results of a rating prediction accuracy test and\nprovides statistical methods …\n"],["MovieTestTest","","MovieTestTest.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n"],["PopularityCalculator","","PopularityCalculator.html","","<p>This helper class is used to calculate popularities of films. The\npopularity of a movie depends on the …\n"],["PredictionTestResult","","PredictionTestResult.html","","<p>This model class is used to compare a provided rating with a predicted one.\nTherefore it contains the …\n"],["Rating","","Rating.html","","<p>This model class represents a single user&#39;s rating of a single movie.\n<p>Author &mdash; Georg Konwisser (software@konwisser.de …\n\n"],["RatingFactory","","RatingFactory.html","","<p>This factory class has only one purpose: it creates Rating objects. The\nreason why this class should …\n"],["RatingPredicter","","RatingPredicter.html","","<p>This utility class is used to calculate rating predictions based on a known\ndata set of ratings.\n<p>Author … &mdash; "],["SimilarityCache","","SimilarityCache.html","","<p>This class is used to cache already calculated similarities between two\nusers as well as the “most …\n"],["SimilarityCacheTest","","SimilarityCacheTest.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n"],["SimilarityCalculator","","SimilarityCalculator.html","","<p>This utility class is used to calculate the similarity between two users as\nwell as the list of most …\n"],["Test","","Test.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n<p>compat mixin for Ruby 1.9.1 with test-unit gem in Eclipse …\n"],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::AutoRunner","","Test/Unit/AutoRunner.html","",""],["Test::Unit::UI","","Test/Unit/UI.html","",""],["TestHelper","","TestHelper.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n"],["TestTime","","TestTime.html","","<p>Author &mdash; Georg Konwisser (software@konwisser.de)\n\n"],["User","","User.html","","<p>This model class represents a single user and contains references to all\nmovies rated by this user.\n<p>Author … &mdash; "],["==","Movie","Movie.html#method-i-3D-3D","(other)","<p>Defines equality by equal id (and type).\n<p>other &mdash; the other object to be compared with\n\n"],["==","User","User.html#method-i-3D-3D","(other)","<p>Defines equality by equal id (and type).\n<p>other &mdash; the other object to be compared with\n\n"],["add_rating","Movie","Movie.html#method-i-add_rating","(rating_obj)","<p>Adds a rating of this movie.\n<p>rating_obj &mdash; Rating objects with a reference to this movie\n\n"],["add_rating","User","User.html#method-i-add_rating","(rating_obj)","<p>Adds a reference to a rating in which this user rated a movie.\n<p>rating_obj &mdash; Rating with a reference to this …\n"],["add_result","MovieTest","MovieTest.html#method-i-add_result","(rating_obj, pred_rating)","<p>Adds a new rating prediction test result.\n<p>rating_obj &mdash; Rating object containing the real (ideal) rating …\n"],["all_movies","MovieData","MovieData.html#method-i-all_movies","()","<p>Returns a list of Movie objects representing all movies in the read in data\nset.\n"],["all_users","MovieData","MovieData.html#method-i-all_users","()","<p>Returns a list of User objects representing all users in the read in data\nset.\n"],["clear_most_sim","SimilarityCache","SimilarityCache.html#method-i-clear_most_sim","()","<p>Clears all lists of most similar users. Useful if the threshold for “is\namong the most similar users” …\n"],["create","RatingFactory","RatingFactory.html#method-i-create","(user, movie, rating_num, timestamp)","<p>Creates a Rating object and makes sure that all references between the\nprovided and created objects are …\n"],["get_most_sim","SimilarityCache","SimilarityCache.html#method-i-get_most_sim","(user)","<p>Returns the list of most similar users to the given user if the list is\nalready stored or <code>nil</code> otherwise. …\n"],["get_sim","SimilarityCache","SimilarityCache.html#method-i-get_sim","(user1, user2)","<p>Returns the similarity for the given two users if already stored or\n<code>nil</code> otherwise. The order of users …\n"],["insert_popularities","PopularityCalculator","PopularityCalculator.html#method-i-insert_popularities","(movies)","<p>Inserts the respective popularity into each provided movie and returns the\nlist sorted descended by popularity. …\n"],["load_data","MovieData","MovieData.html#method-i-load_data","(file_path = nil)","<p>Reads in the data and stores references to resulting User, Movie, and\nRating objects. Also establishes …\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>Calculates the mean error of all previously added prediction test results.\n"],["min_sim=","SimilarityCalculator","SimilarityCalculator.html#method-i-min_sim-3D","(min_sim)","<p>Defines the minimum similarity a user A must have to a user B in order to\nappear in the list of most …\n"],["min_similarity=","MovieData","MovieData.html#method-i-min_similarity-3D","(min_sim)","<p>Defines the minimum similarity a user A must have to a user B in order to\nappear in the list of most …\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(user_id)","<p>Returns a list of users who have the most similarity to the given user.\n<p>user_id &mdash; the numeric id of the …\n"],["most_similar","SimilarityCalculator","SimilarityCalculator.html#method-i-most_similar","(user_id, sort=false)","<p>Returns a list of users who have the most similarity to the given user.\n<p>user_id &mdash; the numeric id of the …\n"],["movie","MovieData","MovieData.html#method-i-movie","(movie_id)","<p>Returns the Movie object with the provided id.\n<p>user_id &mdash; integer id of the movie to be retrieved\n\n"],["movie","PredictionTestResult","PredictionTestResult.html#method-i-movie","()","<p>he rated Movie in this prediction test\n"],["movies","MovieData","MovieData.html#method-i-movies","(user_id)","<p>Returns a list of Movie objects representing all movies which have been\nrated by the provided user.\n<p>movie_id … &mdash; "],["new","Movie","Movie.html#method-c-new","(movie_id)","<p>Created a new Movie object.\n<p>movie_id &mdash; the movie&#39;s numeric id as provided in the data set\n\n"],["new","MovieData","MovieData.html#method-c-new","(data_dir_path = DEFAULT_DIR_PATH, base_test_pair = nil)","<p>Creates a new MovieData object.\n<p>data_dir_path &mdash; optional file path to the directory containing the rated …\n"],["new","MovieTest","MovieTest.html#method-c-new","()","<p>Creates a new MovieTest object.\n"],["new","PopularityCalculator","PopularityCalculator.html#method-c-new","(time_class = Time, popul_half_life_years = 3.0)","<p>Creates a new PopularityCalculator object\n<p>time_class &mdash; the time class to be used for popularity calculations; …\n"],["new","PredictionTestResult","PredictionTestResult.html#method-c-new","(rating_obj, pred_rating)","<p>Creates a new PredictionTestResult object.\n<p>rating_obj &mdash; Rating object containing the actual rating\n<p>pred_rating … &mdash; "],["new","Rating","Rating.html#method-c-new","(user_obj, movie_obj, rating_num, timestamp_num)","<p>Creates a Rating object.\n<p>user_obj &mdash; the rating User\n<p>movie_obj &mdash; the rated Movie\n"],["new","RatingPredicter","RatingPredicter.html#method-c-new","(similarity_calculator)","<p>Creates a new RatingPredicter object.\n<p>similarity_calculator &mdash; the SimilarityCalculator to be used for prediction …\n\n"],["new","SimilarityCache","SimilarityCache.html#method-c-new","()","<p>Creates a new SimilarityCache object.\n"],["new","SimilarityCalculator","SimilarityCalculator.html#method-c-new","(movie_data, min_sim = DEFAULT_MIN_SIMILARITY)","<p>Creates a new SimilarityCalculator object.\n<p>movie_data &mdash; the MovieData objects which contains all the movie …\n"],["new","TestTime","TestTime.html#method-c-new","(now_time)",""],["new","User","User.html#method-c-new","(user_id)","<p>Creates a new User object.\n<p>user_id &mdash; the user&#39;s numeric id as provided in the data set\n\n"],["now","TestTime","TestTime.html#method-i-now","()",""],["output_level=","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-output_level-3D","(level)",""],["parse","FileParser","FileParser.html#method-i-parse","(file_path, first_k = nil)","<p>Parses the given file and fills the collections id_to_user, id_to_movie,\nand ratings with corresponding …\n"],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>Returns a numeric number indicating the popularity of a given movie - a\nbigger number means a greater …\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()","<p>Returns a list of all known movies, sorted by popularity descending order.\n<p>returns &mdash; a list of Movie objects …\n\n"],["predict","MovieData","MovieData.html#method-i-predict","(user_id, movie_id)","<p>Predicts the rating of the given user for the given movie based on the\nknowledge gained from the read …\n"],["predict","RatingPredicter","RatingPredicter.html#method-i-predict","(user_obj, movie_obj)","<p>Calculates the rating prediction of the given user for the given movie.\n<p>user_obj &mdash; a User object representing …\n"],["print_header","TestHelper","TestHelper.html#method-i-print_header","(header)",""],["print_list_to_string","TestHelper","TestHelper.html#method-i-print_list_to_string","(list, from_index, to_index)",""],["put_most_sim","SimilarityCache","SimilarityCache.html#method-i-put_most_sim","(user, most_sim_users)","<p>Stores the list of most similar users to the given user.\n<p>user &mdash; a User object representing the user of interest …\n"],["put_sim","SimilarityCache","SimilarityCache.html#method-i-put_sim","(user1, user2, sim)","<p>Stores the similarity for the given two users. The order of users does not\nmatter.\n<p>user1 &mdash; a User object …\n"],["rated_movies","User","User.html#method-i-rated_movies","()","<p>Returns a list of all movies rated by this user.\n<p>returns &mdash; a list of Movie objects\n\n"],["rating","MovieData","MovieData.html#method-i-rating","(user_id, movie_id)","<p>Returns the integer rating of the given user for the given film. If no such\nrating is known <code>0</code> is returned. …\n"],["rating","PredictionTestResult","PredictionTestResult.html#method-i-rating","()","<p>the actual (not predicted) numeric rating of this prediction test (numeric\nvalue between 1.0 and 5.0 …\n"],["rating_num","User","User.html#method-i-rating_num","(movie_obj)","<p>Returns this user&#39;s rating for a given movie.\n<p>movie_obj &mdash; Movie of interest\n<p>returns &mdash; the numeric rating …\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>Calculates the root mean square error of all previously added prediction\ntest results.\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k)","<p>Runs a prediction accuracy test where the base data set is used to predict\nthe test data set. In order …\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1_id, user2_id)","<p>Returns the similarity of two given users.\n<p>user1_id &mdash; the numeric id of the first user as given in the data …\n"],["similarity","SimilarityCalculator","SimilarityCalculator.html#method-i-similarity","(user1_id, user2_id)","<p>Returns the similarity of two given users.\n<p>user1_id &mdash; the numeric id of the first user as given in the data …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>Calculates the error standard deviation of all previously added prediction\ntest results.\n"],["test_get_sim","SimilarityCacheTest","SimilarityCacheTest.html#method-i-test_get_sim","()",""],["test_mean","MovieTestTest","MovieTestTest.html#method-i-test_mean","()",""],["test_most_similar_on_real_data","MovieDataTestSimilarity","MovieDataTestSimilarity.html#method-i-test_most_similar_on_real_data","()",""],["test_most_similar_on_test_data","MovieDataTestSimilarity","MovieDataTestSimilarity.html#method-i-test_most_similar_on_test_data","()",""],["test_movies","MovieDataTest","MovieDataTest.html#method-i-test_movies","()",""],["test_popularity_calculation","MovieDataTestPopularity","MovieDataTestPopularity.html#method-i-test_popularity_calculation","()",""],["test_predict","MovieDataTest","MovieDataTest.html#method-i-test_predict","()",""],["test_print_real_popularity_list","MovieDataTestPopularity","MovieDataTestPopularity.html#method-i-test_print_real_popularity_list","()",""],["test_rating","MovieDataTest","MovieDataTest.html#method-i-test_rating","()",""],["test_read_real_data_base_test_pair","MovieDataTest","MovieDataTest.html#method-i-test_read_real_data_base_test_pair","()",""],["test_read_real_data_full","MovieDataTest","MovieDataTest.html#method-i-test_read_real_data_full","()",""],["test_read_test_data","MovieDataTest","MovieDataTest.html#method-i-test_read_test_data","()",""],["test_rms","MovieTestTest","MovieTestTest.html#method-i-test_rms","()",""],["test_run_test","MovieDataTest","MovieDataTest.html#method-i-test_run_test","()",""],["test_stddev","MovieTestTest","MovieTestTest.html#method-i-test_stddev","()",""],["test_to_a","MovieTestTest","MovieTestTest.html#method-i-test_to_a","()",""],["test_user_to_user_similarity","MovieDataTestSimilarity","MovieDataTestSimilarity.html#method-i-test_user_to_user_similarity","()",""],["test_viewers","MovieDataTest","MovieDataTest.html#method-i-test_viewers","()",""],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>Returns all previously added prediction test results as a list. The format\nof the list is [user_id1, …\n"],["to_s","Movie","Movie.html#method-i-to_s","()","<p>Defines the string representation as “Movie(id: <em>a</em>, ratings:\n<em>b</em>, popularity: <em>c</em>)”\n"],["to_s","User","User.html#method-i-to_s","()","<p>Defines the string representation as “User(id: <em>a</em>, ratings:\n<em>b</em>)”\n"],["user","MovieData","MovieData.html#method-i-user","(user_id)","<p>Returns the User object with the provided id.\n<p>user_id &mdash; integer id of the user to be retrieved\n\n"],["user","PredictionTestResult","PredictionTestResult.html#method-i-user","()","<p>the rating User in this prediction test\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(movie_id)","<p>Returns a list of User objects representing all users who have rated the\nprovided movie.\n<p>movie_id &mdash; integer …\n\n"]]}}